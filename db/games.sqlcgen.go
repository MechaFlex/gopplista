// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: games.sql

package db

import (
	"context"
)

const addGameToGameSection = `-- name: AddGameToGameSection :one
INSERT INTO
   game_section_games (game_id, game_section_id, order_in_section)
VALUES
   (?, ?, ?) RETURNING game_section_id, game_id, order_in_section
`

type AddGameToGameSectionParams struct {
	GameID         string
	GameSectionID  string
	OrderInSection int64
}

// GAME SECTION'S GAMES
func (q *Queries) AddGameToGameSection(ctx context.Context, arg AddGameToGameSectionParams) (GameSectionGame, error) {
	row := q.db.QueryRowContext(ctx, addGameToGameSection, arg.GameID, arg.GameSectionID, arg.OrderInSection)
	var i GameSectionGame
	err := row.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection)
	return i, err
}

const countGameSections = `-- name: CountGameSections :one
SELECT
   COUNT(*)
FROM
   game_sections
`

func (q *Queries) CountGameSections(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGameSections)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGame = `-- name: CreateGame :one
INSERT INTO
   games (
      title,
      description,
      genre,
      release_year,
      rating,
      image_url
   )
VALUES
   (?, ?, ?, ?, ?, ?) RETURNING id, title, description, genre, release_year, rating, image_url
`

type CreateGameParams struct {
	Title       string
	Description string
	Genre       string
	ReleaseYear int64
	Rating      int64
	ImageUrl    string
}

// GAMES
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.ReleaseYear,
		arg.Rating,
		arg.ImageUrl,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :one
DELETE FROM games
WHERE
   id = ? RETURNING id, title, description, genre, release_year, rating, image_url
`

func (q *Queries) DeleteGame(ctx context.Context, id string) (Game, error) {
	row := q.db.QueryRowContext(ctx, deleteGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT
   id, title, description, genre, release_year, rating, image_url
FROM
   games
WHERE
   id = ?
`

func (q *Queries) GetGame(ctx context.Context, id string) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const getGameSection = `-- name: GetGameSection :one
SELECT
   id, title, description, order_on_page
FROM
   game_sections
WHERE
   id = ?
`

func (q *Queries) GetGameSection(ctx context.Context, id string) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, getGameSection, id)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const getGameSectionGames = `-- name: GetGameSectionGames :many
SELECT
   game_section_id, game_id, order_in_section
FROM
   game_section_games
ORDER BY
   order_in_section
`

func (q *Queries) GetGameSectionGames(ctx context.Context) ([]GameSectionGame, error) {
	rows, err := q.db.QueryContext(ctx, getGameSectionGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameSectionGame
	for rows.Next() {
		var i GameSectionGame
		if err := rows.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameSections = `-- name: GetGameSections :many
SELECT
   id, title, description, order_on_page
FROM
   game_sections
ORDER BY
   order_on_page
`

func (q *Queries) GetGameSections(ctx context.Context) ([]GameSection, error) {
	rows, err := q.db.QueryContext(ctx, getGameSections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameSection
	for rows.Next() {
		var i GameSection
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OrderOnPage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGames = `-- name: GetGames :many
SELECT
   id, title, description, genre, release_year, rating, image_url
FROM
   games
ORDER BY
   title COLLATE NOCASE
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Genre,
			&i.ReleaseYear,
			&i.Rating,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesInGameSection = `-- name: GetGamesInGameSection :many
SELECT
   games.id, games.title, games.description, games.genre, games.release_year, games.rating, games.image_url
FROM
   game_section_games
   JOIN games ON game_section_games.game_id = games.id
WHERE
   game_section_id = ?
ORDER BY
   order_in_section
`

func (q *Queries) GetGamesInGameSection(ctx context.Context, gameSectionID string) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGamesInGameSection, gameSectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Genre,
			&i.ReleaseYear,
			&i.Rating,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGameFromGameSection = `-- name: RemoveGameFromGameSection :one
DELETE FROM game_section_games
WHERE
   game_section_id = ?
   AND game_id = ? RETURNING game_section_id, game_id, order_in_section
`

type RemoveGameFromGameSectionParams struct {
	GameSectionID string
	GameID        string
}

func (q *Queries) RemoveGameFromGameSection(ctx context.Context, arg RemoveGameFromGameSectionParams) (GameSectionGame, error) {
	row := q.db.QueryRowContext(ctx, removeGameFromGameSection, arg.GameSectionID, arg.GameID)
	var i GameSectionGame
	err := row.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection)
	return i, err
}

const removeGamesFromGameSection = `-- name: RemoveGamesFromGameSection :exec
DELETE FROM game_section_games
WHERE
   game_section_id = ?
`

func (q *Queries) RemoveGamesFromGameSection(ctx context.Context, gameSectionID string) error {
	_, err := q.db.ExecContext(ctx, removeGamesFromGameSection, gameSectionID)
	return err
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET
   title = ?,
   description = ?,
   genre = ?,
   release_year = ?,
   rating = ?,
   image_url = ?
WHERE
   id = ? RETURNING id, title, description, genre, release_year, rating, image_url
`

type UpdateGameParams struct {
	Title       string
	Description string
	Genre       string
	ReleaseYear int64
	Rating      int64
	ImageUrl    string
	ID          string
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, updateGame,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.ReleaseYear,
		arg.Rating,
		arg.ImageUrl,
		arg.ID,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const updateGameSection = `-- name: UpdateGameSection :one
UPDATE game_sections
SET
   title = ?,
   description = ?
WHERE
   id = ? RETURNING id, title, description, order_on_page
`

type UpdateGameSectionParams struct {
	Title       string
	Description string
	ID          string
}

func (q *Queries) UpdateGameSection(ctx context.Context, arg UpdateGameSectionParams) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, updateGameSection, arg.Title, arg.Description, arg.ID)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const unsafeCreateGameSection = `-- name: unsafeCreateGameSection :one
INSERT INTO
   game_sections (title, description, order_on_page)
VALUES
   (?, ?, ?) RETURNING id, title, description, order_on_page
`

type unsafeCreateGameSectionParams struct {
	Title       string
	Description string
	OrderOnPage int64
}

// GAME SECTIONS_LIST
func (q *Queries) unsafeCreateGameSection(ctx context.Context, arg unsafeCreateGameSectionParams) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, unsafeCreateGameSection, arg.Title, arg.Description, arg.OrderOnPage)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const unsafeDeleteGameSection = `-- name: unsafeDeleteGameSection :one
DELETE FROM game_sections
WHERE
   id = ? RETURNING id, title, description, order_on_page
`

func (q *Queries) unsafeDeleteGameSection(ctx context.Context, id string) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, unsafeDeleteGameSection, id)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const unsafeUpdateGameSectionOrder = `-- name: unsafeUpdateGameSectionOrder :one
UPDATE game_sections
SET
   order_on_page = ?
WHERE
   id = ? RETURNING id, title, description, order_on_page
`

type unsafeUpdateGameSectionOrderParams struct {
	OrderOnPage int64
	ID          string
}

func (q *Queries) unsafeUpdateGameSectionOrder(ctx context.Context, arg unsafeUpdateGameSectionOrderParams) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, unsafeUpdateGameSectionOrder, arg.OrderOnPage, arg.ID)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}
