// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: games.sql

package db

import (
	"context"
)

const addGameToSection = `-- name: AddGameToSection :one
INSERT INTO
   game_section_games (game_id, game_section_id, order_in_section)
VALUES
   (?, ?, ?) RETURNING game_section_id, game_id, order_in_section
`

type AddGameToSectionParams struct {
	GameID         string
	GameSectionID  string
	OrderInSection int64
}

// GAME SECTION'S GAMES
func (q *Queries) AddGameToSection(ctx context.Context, arg AddGameToSectionParams) (GameSectionGame, error) {
	row := q.db.QueryRowContext(ctx, addGameToSection, arg.GameID, arg.GameSectionID, arg.OrderInSection)
	var i GameSectionGame
	err := row.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection)
	return i, err
}

const countGameSections = `-- name: CountGameSections :one
SELECT
   COUNT(*)
FROM
   game_sections
`

func (q *Queries) CountGameSections(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGameSections)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGame = `-- name: CreateGame :one
INSERT INTO
   games (
      title,
      description,
      genre,
      release_year,
      rating,
      image_url
   )
VALUES
   (?, ?, ?, ?, ?, ?) RETURNING id, title, description, genre, release_year, rating, image_url
`

type CreateGameParams struct {
	Title       string
	Description string
	Genre       string
	ReleaseYear int64
	Rating      int64
	ImageUrl    string
}

// GAMES
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.ReleaseYear,
		arg.Rating,
		arg.ImageUrl,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const createGameSection = `-- name: CreateGameSection :one
INSERT INTO
   game_sections (title, description, order_on_page)
VALUES
   (?, ?, ?) RETURNING id, title, description, order_on_page
`

type CreateGameSectionParams struct {
	Title       string
	Description string
	OrderOnPage int64
}

// GAME SECTIONS
func (q *Queries) CreateGameSection(ctx context.Context, arg CreateGameSectionParams) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, createGameSection, arg.Title, arg.Description, arg.OrderOnPage)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :one
DELETE FROM games
WHERE
   id = ? RETURNING id, title, description, genre, release_year, rating, image_url
`

func (q *Queries) DeleteGame(ctx context.Context, id string) (Game, error) {
	row := q.db.QueryRowContext(ctx, deleteGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const deleteGameSection = `-- name: DeleteGameSection :one
DELETE FROM game_sections
WHERE
   id = ? RETURNING id, title, description, order_on_page
`

func (q *Queries) DeleteGameSection(ctx context.Context, id string) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, deleteGameSection, id)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const getAllGameSectionsWithGames = `-- name: GetAllGameSectionsWithGames :many
SELECT
   game_sections.id, game_sections.title, game_sections.description, game_sections.order_on_page, games.id, games.title, games.description, games.genre, games.release_year, games.rating, games.image_url
FROM
   game_sections
   LEFT JOIN game_section_games ON game_sections.id = game_section_games.game_section_id
   LEFT JOIN games ON game_section_games.game_id = games.id
ORDER BY
   game_sections.order_on_page,
   game_section_games.order_in_section
`

type GetAllGameSectionsWithGamesRow struct {
	ID          string
	Title       string
	Description string
	OrderOnPage int64
	Game        Game
}

func (q *Queries) GetAllGameSectionsWithGames(ctx context.Context) ([]GetAllGameSectionsWithGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllGameSectionsWithGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGameSectionsWithGamesRow
	for rows.Next() {
		var i GetAllGameSectionsWithGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OrderOnPage,
			&i.Game.ID,
			&i.Game.Title,
			&i.Game.Description,
			&i.Game.Genre,
			&i.Game.ReleaseYear,
			&i.Game.Rating,
			&i.Game.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGame = `-- name: GetGame :one
SELECT
   id, title, description, genre, release_year, rating, image_url
FROM
   games
WHERE
   id = ?
`

func (q *Queries) GetGame(ctx context.Context, id string) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const getGameSection = `-- name: GetGameSection :one
SELECT
   id, title, description, order_on_page
FROM
   game_sections
WHERE
   id = ?
`

func (q *Queries) GetGameSection(ctx context.Context, id string) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, getGameSection, id)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const getGameSections = `-- name: GetGameSections :many
SELECT
   id, title, description, order_on_page
FROM
   game_sections
ORDER BY
   order_on_page
`

func (q *Queries) GetGameSections(ctx context.Context) ([]GameSection, error) {
	rows, err := q.db.QueryContext(ctx, getGameSections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameSection
	for rows.Next() {
		var i GameSection
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OrderOnPage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGames = `-- name: GetGames :many
SELECT
   id, title, description, genre, release_year, rating, image_url
FROM
   games
ORDER BY
   title
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Genre,
			&i.ReleaseYear,
			&i.Rating,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesInGameSection = `-- name: GetGamesInGameSection :many
SELECT
   games.id, games.title, games.description, games.genre, games.release_year, games.rating, games.image_url
FROM
   game_section_games
   JOIN games ON game_section_games.game_id = games.id
WHERE
   game_section_id = ?
ORDER BY
   order_in_section
`

func (q *Queries) GetGamesInGameSection(ctx context.Context, gameSectionID string) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGamesInGameSection, gameSectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Genre,
			&i.ReleaseYear,
			&i.Rating,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGameFromSection = `-- name: RemoveGameFromSection :one
DELETE FROM game_section_games
WHERE
   game_id = ?
   AND game_section_id = ? RETURNING game_section_id, game_id, order_in_section
`

type RemoveGameFromSectionParams struct {
	GameID        string
	GameSectionID string
}

func (q *Queries) RemoveGameFromSection(ctx context.Context, arg RemoveGameFromSectionParams) (GameSectionGame, error) {
	row := q.db.QueryRowContext(ctx, removeGameFromSection, arg.GameID, arg.GameSectionID)
	var i GameSectionGame
	err := row.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection)
	return i, err
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET
   title = ?,
   description = ?,
   genre = ?,
   release_year = ?,
   rating = ?,
   image_url = ?
WHERE
   id = ? RETURNING id, title, description, genre, release_year, rating, image_url
`

type UpdateGameParams struct {
	Title       string
	Description string
	Genre       string
	ReleaseYear int64
	Rating      int64
	ImageUrl    string
	ID          string
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, updateGame,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.ReleaseYear,
		arg.Rating,
		arg.ImageUrl,
		arg.ID,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.ReleaseYear,
		&i.Rating,
		&i.ImageUrl,
	)
	return i, err
}

const updateGameSection = `-- name: UpdateGameSection :one
UPDATE game_sections
SET
   title = ?,
   description = ?,
   order_on_page = ?
WHERE
   id = ? RETURNING id, title, description, order_on_page
`

type UpdateGameSectionParams struct {
	Title       string
	Description string
	OrderOnPage int64
	ID          string
}

func (q *Queries) UpdateGameSection(ctx context.Context, arg UpdateGameSectionParams) (GameSection, error) {
	row := q.db.QueryRowContext(ctx, updateGameSection,
		arg.Title,
		arg.Description,
		arg.OrderOnPage,
		arg.ID,
	)
	var i GameSection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OrderOnPage,
	)
	return i, err
}

const updateGameInSectionOrder = `-- name: updateGameInSectionOrder :one
UPDATE game_section_games
SET
   order_in_section = ?
WHERE
   game_id = ?
   AND game_section_id = ? RETURNING game_section_id, game_id, order_in_section
`

type updateGameInSectionOrderParams struct {
	OrderInSection int64
	GameID         string
	GameSectionID  string
}

func (q *Queries) updateGameInSectionOrder(ctx context.Context, arg updateGameInSectionOrderParams) (GameSectionGame, error) {
	row := q.db.QueryRowContext(ctx, updateGameInSectionOrder, arg.OrderInSection, arg.GameID, arg.GameSectionID)
	var i GameSectionGame
	err := row.Scan(&i.GameSectionID, &i.GameID, &i.OrderInSection)
	return i, err
}
